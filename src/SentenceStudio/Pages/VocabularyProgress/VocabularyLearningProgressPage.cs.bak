using MauiReactor.Shapes;
using System.Collections.ObjectModel;

namespace SentenceStudio.Pages.VocabularyProgress;

public enum VocabularyFilterType
{
    All,
    Known,
    Learning, 
    Unknown
}

class VocabularyProgressProps
{
    public int? ResourceId { get; set; }
    public string Title { get; set; } = "Vocabulary Progress";
}

class VocabularyLearningProgressPageState
{
    public bool IsBusy { get; set; }
    public ObservableCollection<VocabularyProgressItem> VocabularyItems { get; set; } = new();
    public ObservableCollection<LearningResource> AvailableResources { get; set; } = new();
    public LearningResource? SelectedResource { get; set; }
    public VocabularyFilterType SelectedFilter { get; set; } = VocabularyFilterType.All;
    public string SearchText { get; set; } = string.Empty;
    
    // Statistics
    public int TotalWords { get; set; }
    public int KnownWords { get; set; }
    public int LearningWords { get; set; }
    public int UnknownWords { get; set; }
}

public class VocabularyProgressItem
{
    public VocabularyWord Word { get; set; } = null!;
    public SentenceStudio.Shared.Models.VocabularyProgress? Progress { get; set; }
    public List<string> ResourceNames { get; set; } = new();
    public List<string> ActivitiesUsed { get; set; } = new();
    
    // Status helpers
    public bool IsKnown => Progress?.IsKnown ?? false;
    public bool IsLearning => Progress?.IsLearning ?? false;
    public bool IsUnknown => Progress?.IsUnknown ?? true;
    
    // Progress percentages for visual indicators
    public double MultipleChoicePercentage => (Progress?.MultipleChoiceCorrect ?? 0) / 3.0 * 100;
    public double TextEntryPercentage => (Progress?.TextEntryCorrect ?? 0) / 3.0 * 100;
    
    // Status color
    public Color StatusColor
    {
        get
        {
            if (IsKnown) return ApplicationTheme.Success;
            if (IsLearning) return ApplicationTheme.Warning;
            return ApplicationTheme.Gray400;
        }
    }
    
    // Status text
    public string StatusText
    {
        get
        {
            if (IsKnown) return "âœ… Known";
            if (IsLearning) return "ðŸ”„ Learning";
            return "â­• Unknown";
        }
    }
}

partial class VocabularyLearningProgressPage : Component<VocabularyLearningProgressPageState, VocabularyProgressProps>
{
    [Inject] VocabularyProgressService _progressService;
    [Inject] LearningResourceRepository _resourceRepo;
    [Inject] VocabularyLearningContextRepository _contextRepo;

    LocalizationManager _localize => LocalizationManager.Instance;

    public override VisualNode Render()
    {
        return ContentPage(Props.Title ?? "Vocabulary Progress",
            Grid(rows: "Auto,Auto,*", columns: "*",
                HeaderStatsSection(),
                FilterControlsSection(),
                VocabularyListSection()
            ).Padding(16)
        )
        .OnAppearing(LoadData);
    }

    VisualNode HeaderStatsSection() =>
        Border(
            Grid(rows: "Auto", columns: "*,*,*,*",
                StatCard("Total", State.TotalWords, ApplicationTheme.Primary),
                StatCard("Known", State.KnownWords, ApplicationTheme.Success).GridColumn(1),
                StatCard("Learning", State.LearningWords, ApplicationTheme.Warning).GridColumn(2),
                StatCard("Unknown", State.UnknownWords, ApplicationTheme.Gray400).GridColumn(3)
            ).ColumnSpacing(8)
        )
        .Background(Theme.IsLightTheme ? Colors.White : ApplicationTheme.DarkSecondaryBackground)
        .StrokeShape(new RoundRectangle().CornerRadius(12))
        .StrokeThickness(1)
        .Stroke(ApplicationTheme.Gray200)
        .Padding(16)
        .Margin(0, 0, 0, 16);

    VisualNode StatCard(string title, int count, Color color) =>
        VStack(spacing: 4,
            Label(title)
                .FontSize(12)
                .TextColor(ApplicationTheme.Gray600)
                .Center(),
            Label(count.ToString())
                .FontSize(24)
                .FontAttributes(FontAttributes.Bold)
                .TextColor(color)
                .Center()
        );

    VisualNode FilterControlsSection() =>
        VStack(spacing: 12,
            // Resource filter
            Grid(rows: "Auto", columns: "Auto,*",
                Label("Resource:")
                    .FontSize(14)
                    .FontAttributes(FontAttributes.Bold)
                    .VCenter(),
                Picker()
                    .ItemsSource(State.AvailableResources.Prepend(new LearningResource { Id = -1, Title = "All Resources" }))
                    .ItemDisplayBinding(new Binding("Title"))
                    .SelectedItem(State.SelectedResource)
                    .OnSelectedItemChanged((s, e) => OnResourceFilterChanged(e.SelectedItem as LearningResource))
                    .GridColumn(1)
            ).ColumnSpacing(12),
            
            // Status filter
            Grid(rows: "Auto", columns: "Auto,*,*,*,*",
                Label("Status:")
                    .FontSize(14)
                    .FontAttributes(FontAttributes.Bold)
                    .VCenter(),
                FilterButton("All", VocabularyFilterType.All).GridColumn(1),
                FilterButton("Known", VocabularyFilterType.Known).GridColumn(2),
                FilterButton("Learning", VocabularyFilterType.Learning).GridColumn(3),
                FilterButton("Unknown", VocabularyFilterType.Unknown).GridColumn(4)
            ).ColumnSpacing(8),
            
            // Search
            Entry()
                .Placeholder("Search vocabulary...")
                .Text(State.SearchText)
                .OnTextChanged((s, e) => OnSearchTextChanged(e.NewTextValue))
        )
        .GridRow(1)
        .Margin(0, 0, 0, 16);

    VisualNode FilterButton(string text, VocabularyFilterType filterType)
    {
        var isSelected = State.SelectedFilter == filterType;
        return Button(text)
            .Background(isSelected ? ApplicationTheme.Primary : Colors.Transparent)
            .TextColor(isSelected ? Colors.White : ApplicationTheme.Primary)
            .BorderColor(ApplicationTheme.Primary)
            .BorderWidth(1)
            .CornerRadius(6)
            .FontSize(12)
            .Padding(8, 6)
            .OnClicked(() => OnFilterChanged(filterType));
    }

    VisualNode VocabularyListSection() =>
        CollectionView()
            .ItemsSource(State.VocabularyItems)
            .ItemTemplate(RenderVocabularyItem)
            .GridRow(2)
            .IsVisible(!State.IsBusy);

    VisualNode RenderVocabularyItem(VocabularyProgressItem item) =>
        Border(
            Grid(rows: "Auto,Auto,Auto", columns: "Auto,*,Auto",
                // Status indicator
                Ellipse()
                    .Fill(item.StatusColor)
                    .WidthRequest(12)
                    .HeightRequest(12)
                    .VCenter()
                    .GridRowSpan(3),
                
                // Word info
                VStack(spacing: 4,
                    Label($"{item.Word.TargetLanguageTerm} â†’ {item.Word.NativeLanguageTerm}")
                        .FontSize(16)
                        .FontAttributes(FontAttributes.Bold),
                    
                    Label($"Resources: {string.Join(", ", item.ResourceNames)}")
                        .FontSize(12)
                        .TextColor(ApplicationTheme.Gray600)
                        .IsVisible(item.ResourceNames.Any()),
                    
                    Label($"Activities: {string.Join(", ", item.ActivitiesUsed)}")
                        .FontSize(12)
                        .TextColor(ApplicationTheme.Gray600)
                        .IsVisible(item.ActivitiesUsed.Any())
                )
                .GridColumn(1)
                .VCenter(),
                
                // Progress bars and status
                VStack(spacing: 4,
                    Label(item.StatusText)
                        .FontSize(12)
                        .FontAttributes(FontAttributes.Bold)
                        .TextColor(item.StatusColor)
                        .HEnd(),
                    
                    // Multiple Choice Progress
                    VStack(spacing: 2,
                        Label($"MC: {item.Progress?.MultipleChoiceCorrect ?? 0}/3")
                            .FontSize(10)
                            .TextColor(ApplicationTheme.Gray600)
                            .HEnd(),
                        ProgressBar()
                            .Progress(item.Progress?.MultipleChoiceProgress ?? 0)
                            .ProgressColor(ApplicationTheme.Primary)
                            .HeightRequest(4)
                            .WidthRequest(60)
                    ).IsVisible(item.Progress != null),
                    
                    // Text Entry Progress  
                    VStack(spacing: 2,
                        Label($"Text: {item.Progress?.TextEntryCorrect ?? 0}/3")
                            .FontSize(10)
                            .TextColor(ApplicationTheme.Gray600)
                            .HEnd(),
                        ProgressBar()
                            .Progress(item.Progress?.TextEntryProgress ?? 0)
                            .ProgressColor(ApplicationTheme.Success)
                            .HeightRequest(4)
                            .WidthRequest(60)
                    ).IsVisible(item.Progress != null && item.Progress.IsPromoted)
                )
                .GridColumn(2)
                .VCenter()
            )
            .Padding(16, 12)
        )
        .Background(Theme.IsLightTheme ? Colors.White : ApplicationTheme.DarkSecondaryBackground)
        .StrokeShape(new RoundRectangle().CornerRadius(8))
        .StrokeThickness(1)
        .Stroke(ApplicationTheme.Gray200)
        .Margin(0, 4);

    async Task LoadData()
    {
        SetState(s => s.IsBusy = true);

        try
        {
            // Load all learning resources
            var resources = await _resourceRepo.GetAllResourcesAsync();
            SetState(s => s.AvailableResources = new ObservableCollection<LearningResource>(resources));

            // Set initial resource filter if specified
            if (Props?.ResourceId.HasValue == true && Props.ResourceId.Value != -1)
            {
                var selectedResource = resources.FirstOrDefault(r => r.Id == Props.ResourceId.Value);
                SetState(s => s.SelectedResource = selectedResource);
            }
            else
            {
                // Set "All Resources" as default
                SetState(s => s.SelectedResource = new LearningResource { Id = -1, Title = "All Resources" });
            }

            await LoadVocabularyData();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading vocabulary progress data: {ex.Message}");
            await Application.Current.MainPage.DisplayAlert("Error", "Failed to load vocabulary progress data.", "OK");
        }
        finally
        {
            SetState(s => s.IsBusy = false);
        }
    }

    async Task LoadVocabularyData()
    {
        var allVocabulary = new List<VocabularyWord>();
        var vocabularyToResourceMap = new Dictionary<int, List<string>>();

        if (State.SelectedResource?.Id == -1)
        {
            // Load vocabulary from ALL resources
            foreach (var resource in State.AvailableResources.Where(r => r.Id != -1))
            {
                var fullResource = await _resourceRepo.GetResourceAsync(resource.Id);
                if (fullResource?.Vocabulary?.Any() == true)
                {
                    foreach (var word in fullResource.Vocabulary)
                    {
                        if (!allVocabulary.Any(v => v.Id == word.Id))
                        {
                            allVocabulary.Add(word);
                            vocabularyToResourceMap[word.Id] = new List<string>();
                        }
                        
                        if (!vocabularyToResourceMap[word.Id].Contains(fullResource.Title ?? "Unknown"))
                        {
                            vocabularyToResourceMap[word.Id].Add(fullResource.Title ?? "Unknown");
                        }
                    }
                }
            }
        }
        else if (State.SelectedResource != null)
        {
            // Load vocabulary from specific resource
            var resource = await _resourceRepo.GetResourceAsync(State.SelectedResource.Id);
            if (resource?.Vocabulary?.Any() == true)
            {
                allVocabulary = resource.Vocabulary.ToList();
                foreach (var word in allVocabulary)
                {
                    vocabularyToResourceMap[word.Id] = new List<string> { resource.Title ?? "Unknown" };
                }
            }
        }

        if (!allVocabulary.Any())
        {
            SetState(s => 
            {
                s.VocabularyItems.Clear();
                s.TotalWords = 0;
                s.KnownWords = 0;
                s.LearningWords = 0;
                s.UnknownWords = 0;
            });
            return;
        }

        // Get progress for all vocabulary
        var wordIds = allVocabulary.Select(w => w.Id).ToList();
        var progressDict = await _progressService.GetProgressForWordsAsync(wordIds);

        // Get learning contexts for activity information
        var allContexts = await _contextRepo.ListAsync();
        var contextsByWordId = allContexts
            .GroupBy(c => c.VocabularyProgress.VocabularyWordId)
            .ToDictionary(g => g.Key, g => g.ToList());

        // Create progress items
        var progressItems = allVocabulary.Select(word =>
        {
            var progress = progressDict.ContainsKey(word.Id) ? progressDict[word.Id] : null;
            var contexts = contextsByWordId.ContainsKey(word.Id) ? contextsByWordId[word.Id] : new List<VocabularyLearningContext>();
            var activities = contexts.Select(c => c.Activity).Distinct().ToList();
            
            return new VocabularyProgressItem
            {
                Word = word,
                Progress = progress,
                ResourceNames = vocabularyToResourceMap.ContainsKey(word.Id) ? vocabularyToResourceMap[word.Id] : new List<string>(),
                ActivitiesUsed = activities
            };
        }).ToList();

        // Apply filters
        var filteredItems = ApplyFilters(progressItems);

        SetState(s => 
        {
            s.VocabularyItems = new ObservableCollection<VocabularyProgressItem>(filteredItems);
            s.TotalWords = progressItems.Count;
            s.KnownWords = progressItems.Count(i => i.IsKnown);
            s.LearningWords = progressItems.Count(i => i.IsLearning);
            s.UnknownWords = progressItems.Count(i => i.IsUnknown);
        });
    }

    List<VocabularyProgressItem> ApplyFilters(List<VocabularyProgressItem> items)
    {
        var filtered = items.AsQueryable();

        // Apply status filter
        filtered = State.SelectedFilter switch
        {
            VocabularyFilterType.Known => filtered.Where(i => i.IsKnown),
            VocabularyFilterType.Learning => filtered.Where(i => i.IsLearning),
            VocabularyFilterType.Unknown => filtered.Where(i => i.IsUnknown),
            _ => filtered
        };

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(State.SearchText))
        {
            var searchLower = State.SearchText.ToLower();
            filtered = filtered.Where(i => 
                (i.Word.NativeLanguageTerm?.ToLower().Contains(searchLower) == true) ||
                (i.Word.TargetLanguageTerm?.ToLower().Contains(searchLower) == true));
        }

        return filtered.OrderBy(i => i.Word.NativeLanguageTerm).ToList();
    }

    async Task OnResourceFilterChanged(LearningResource? resource)
    {
        SetState(s => s.SelectedResource = resource);
        await LoadVocabularyData();
    }

    async Task OnFilterChanged(VocabularyFilterType filterType)
    {
        SetState(s => s.SelectedFilter = filterType);
        await LoadVocabularyData();
    }

    async Task OnSearchTextChanged(string searchText)
    {
        SetState(s => s.SearchText = searchText);
        await LoadVocabularyData();
    }
}
