// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SentenceStudio.Data;

#nullable disable

namespace SentenceStudio.Shared.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701143213_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("SentenceStudio.Shared.Models.Challenge", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RecommendedTranslation")
                        .HasColumnType("TEXT");

                    b.Property<string>("SentenceText")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserActivityID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VocabularyWord")
                        .HasColumnType("TEXT");

                    b.Property<string>("VocabularyWordAsUsed")
                        .HasColumnType("TEXT");

                    b.Property<string>("VocabularyWordGuesses")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("UserActivityID");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.Conversation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.ConversationChunk", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<int>("ConversationID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Participant")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ConversationID");

                    b.ToTable("ConversationChunks");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.GradeResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<string>("AccuracyExplanation")
                        .HasColumnType("TEXT");

                    b.Property<int>("ChallengeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Fluency")
                        .HasColumnType("REAL");

                    b.Property<string>("FluencyExplanation")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecommendedTranslation")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("GradeResponses");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.LearningResource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OldVocabularyListID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SkillID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Transcript")
                        .HasColumnType("TEXT");

                    b.Property<string>("Translation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("LearningResources");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.ResourceVocabularyMapping", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResourceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VocabularyWordID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("ResourceVocabularyMappings");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.SceneImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SceneImages");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.SkillProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SkillProfiles");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.Story", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ListID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SkillID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.StreamHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AudioFilePath")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phrase")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("StreamHistories");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.UserActivity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<string>("Activity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Fluency")
                        .HasColumnType("REAL");

                    b.Property<string>("Input")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeLanguage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenAI_APIKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetLanguage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.VocabularyList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("VocabularyLists");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.VocabularyWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChallengeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExampleSentence")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExampleTranslation")
                        .HasColumnType("TEXT");

                    b.Property<string>("NativeLanguageTerm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("PartOfSpeech")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetLanguageTerm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VocabularyListID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ChallengeID");

                    b.HasIndex("VocabularyListID");

                    b.ToTable("VocabularyWords");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.Challenge", b =>
                {
                    b.HasOne("SentenceStudio.Shared.Models.UserActivity", "UserActivity")
                        .WithMany()
                        .HasForeignKey("UserActivityID");

                    b.Navigation("UserActivity");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.ConversationChunk", b =>
                {
                    b.HasOne("SentenceStudio.Shared.Models.Conversation", null)
                        .WithMany("Chunks")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.VocabularyWord", b =>
                {
                    b.HasOne("SentenceStudio.Shared.Models.Challenge", null)
                        .WithMany("Vocabulary")
                        .HasForeignKey("ChallengeID");

                    b.HasOne("SentenceStudio.Shared.Models.VocabularyList", null)
                        .WithMany("Words")
                        .HasForeignKey("VocabularyListID");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.Challenge", b =>
                {
                    b.Navigation("Vocabulary");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.Conversation", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("SentenceStudio.Shared.Models.VocabularyList", b =>
                {
                    b.Navigation("Words");
                });
#pragma warning restore 612, 618
        }
    }
}
